as.rFire.numeric <- function(a) {basic_convert(a, 'doubleValue')}
as.rFire.POSIXct <- function(a) {basic_convert(format(a, '%Y-%m-%dT%H:%M:%SZ'), 'timestampValue')}
as.rFire.character <- function(a) {basic_convert(a, 'stringValue')}
as.rFire.factor <- function(a) {basic_convert(as.character(a), 'stringValue')}
as.rFire.list <- function(a) {list('mapValue'=list('values'=setNames(lapply(a, as.rFire),names(a))))}
as.rFire.data.frame <- function(a) {list('mapValue'=list('values'=setNames(lapply(a, as.rFire),names(a))))}
a <- as.rFire(data.frame('a'=logical(26), 'b'=letters))
View(a)
load_all()
docs <- c(
'Directories/y61Qnc0A2gV8lEm5gnEf/Test Values/kxjfzYF8qnmDXj9G3jF7',
'Directories/y61Qnc0A2gV8lEm5gnEf'
)
a <- batchGetDocuments(docs)
b <- getDocument(docs[2])
db = rFire_get_global_db()
project = rFire_get_global_project()
pre_path <- paste('projects',project,'databases',db,'documents',sep='/')
parent_path <- pre_path
cG <- 'Directories'
documentId='TestDocument'
body <- list(
name=paste(parent_path, cG, documentId, sep='/'),
fields=as.rFire(list('a'=5, 'b'='abc', 'c'=list('pi'=3.14)))
)
f <- googleAuthR::gar_api_generator(
paste0(base_url, paste(pre_path,parent_path,cG,sep='/')),
"POST",
pars_args=list(documentId=documentId)
)
req <- f(
the_body = jsonlite::toJSON(body),
data_parse_function = function(x) {x}
)
check_status(req)
load_all()
load_all()
docs <- c(
'Directories/y61Qnc0A2gV8lEm5gnEf/Test Values/kxjfzYF8qnmDXj9G3jF7',
'Directories/y61Qnc0A2gV8lEm5gnEf'
)
a <- batchGetDocuments(docs)
b <- getDocument(docs[2])
db = rFire_get_global_db()
project = rFire_get_global_project()
pre_path <- paste('projects',project,'databases',db,'documents',sep='/')
parent_path <- pre_path
cG <- 'Directories'
documentId='TestDocument'
body <- list(
name=paste(parent_path, cG, documentId, sep='/'),
fields=as.rFire(list('a'=5, 'b'='abc', 'c'=list('pi'=3.14)))
)
f <- googleAuthR::gar_api_generator(
paste0(base_url, paste(pre_path,parent_path,cG,sep='/')),
"POST",
pars_args=list(documentId=documentId)
)
req <- f(
the_body = jsonlite::toJSON(body),
data_parse_function = function(x) {x}
)
check_status(req)
body <- list(
name=paste(parent_path, cG, documentId, sep='/'),
fields=lapply(list('a'=5, 'b'='abc', 'c'=list('pi'=3.14)), as.rFire)
)
f <- googleAuthR::gar_api_generator(
paste0(base_url, paste(pre_path,parent_path,cG,sep='/')),
"POST",
pars_args=list(documentId=documentId)
)
req <- f(
the_body = jsonlite::toJSON(body),
data_parse_function = function(x) {x}
)
print(body$name)
print(b$name)
jsonlite::toJSON(body)
body <- list(
fields=lapply(list('a'=5, 'b'='abc', 'c'=list('pi'=3.14)), as.rFire)
)
req <- f(
the_body = jsonlite::toJSON(body),
data_parse_function = function(x) {x}
)
jsonlite::toJSON(body)
library(jsonlite)
?toJSON
jsonlite::toJSON(body, simplifyVector=T)
jsonlite::toJSON(body, auto_unbox=T)
req <- f(
the_body = jsonlite::toJSON(body, auto_unbox=T),
data_parse_function = function(x) {x}
)
nchar(parent_path)
parent_path <- NULL
f <- googleAuthR::gar_api_generator(
paste0(base_url, paste(pre_path,parent_path,cG,sep='/')),
"POST",
pars_args=list(documentId=documentId)
)
req <- f(
the_body = jsonlite::toJSON(body, auto_unbox=T),
data_parse_function = function(x) {x}
)
paste0(base_url, paste(pre_path,parent_path,cG,sep='/'))
parent_path <- character(0)
paste0(base_url, paste(pre_path,parent_path,cG,sep='/'))
paste0(base_url, paste(pre_path,parent_path), '/',cG)
f <- googleAuthR::gar_api_generator(
paste0(base_url, paste(pre_path,parent_path), '/',cG),
"POST",
pars_args=list(documentId=documentId)
)
req <- f(
the_body = jsonlite::toJSON(body, auto_unbox=T),
data_parse_function = function(x) {x}
)
parent_path <- pre_path
body <- list(
name=paste(parent_path, cG, documentId, sep='/'),
fields=lapply(list('a'=5, 'b'='abc', 'c'=list('pi'=3.14)), as.rFire)
)
f <- googleAuthR::gar_api_generator(
paste0(base_url, paste(parent_path, cG, sep='/')),
"POST",
pars_args=list(documentId=documentId)
)
req <- f(
the_body = jsonlite::toJSON(body, auto_unbox=T),
data_parse_function = function(x) {x}
)
body <- list(
# name=paste(parent_path, cG, documentId, sep='/'),
fields=lapply(list('a'=5, 'b'='abc', 'c'=list('pi'=3.14)), as.rFire)
)
f <- googleAuthR::gar_api_generator(
paste0(base_url, paste(parent_path, cG, sep='/')),
"POST",
pars_args=list(documentId=documentId)
)
req <- f(
the_body = jsonlite::toJSON(body, auto_unbox=T),
data_parse_function = function(x) {x}
)
check_status(req)
View(req)
body <- list(
fields=lapply(list('a'=5, 'b'='abc', 'c'=list('pi'=3.14, 'c1'=list('c2'=list('c3'=4)))), as.rFire)
)
req <- f(
the_body = jsonlite::toJSON(body, auto_unbox=T),
data_parse_function = function(x) {x}
)
check_status(req)
list('a'=5, 'b'=c(1,2,3))
as.rFire(list('a'=5, 'b'=c(1,2,3)))
View(body)
load_all()
c <- createDocument('test1',data=list('test'=123), cG='Directories')
View(c)
c <- createDocument('test2',data=list('test'=123, 'a'='abc'), cG='Directories')
parent_path <- pre_path
cG <- 'Directories'
pageSize <- 100
f <- googleAuthR::gar_api_generator(
paste0(base_url, paste(parent_path, cG, sep='/')),
"GET",
pars_args=list(pageSize=pageSize)
)
req <- f()
check_status(req)
View(req)
a <- req$contetn
a <- req$content
seq(1,0)
?seq
seq_len(5)
seq_len(0)
load_all()
d <- listDocuments(cG='Directories')
load_all()
d <- listDocuments(cG='Directories')
View(d)
load_all()
d <- listDocuments(cG='Directories')
load_all()
parent_path <- pre_path
cG <- 'Directories'
pageSize <- 100
f <- googleAuthR::gar_api_generator(
paste0(base_url, paste(parent_path, cG, sep='/')),
"GET",
pars_args=list(pageSize=pageSize),
data_parse_function = function(x){x}
)
req <- f()
View(req)
is.na(req$fields$parent_id$stringValue)
is.na(req$documents$fields$parent_id$stringValue)
View(req$documents$fields$parent_id)
isTruthy(req$documents$fields$parent_id$stringValue)
shiny::isTruthy(req$documents$fields$parent_id$stringValue)
sapply(req$documents$fields$parent_id$stringValue, shiny::isTruthy)
?inherits
a <- structure(list(), class='test_class')
class(a)
a <- list()
inherits(a, 'test_class')
a <- structure(list(), class='test_class')
inherits(a, 'test_class')
?assert_that
encode.rFire.document <- function(name=NULL, data=list()) {
assertthat::assert_that(is.string(name), class(data) %in% c('data.frame','list'))
return(structure(list(
name=name,
fields=setNames(lapply(data, as.rFire),names(data))
), 'rFire.document'))
}
a <- list('a'=1, 'b'=1234, 'c'=list('pepsi'='never'))
b <- encode.rFire.document(data=a)
encode.rFire.document <- function(name=NULL, data=list()) {
assertthat::assert_that(class(data) %in% c('data.frame','list'))
return(structure(list(
name=name,
fields=setNames(lapply(data, as.rFire),names(data))
), 'rFire.document'))
}
b <- encode.rFire.document(data=a)
a <- function(x) {return()}
b <- a(42)
print(b)
?match.args
?match.arg
c(1, 'a')
c(NA, 1, 'a')
body <- list(
fields=lapply(list('a'=5, 'b'='abc', 'c'=list('pi'=c(1,3.14))), as.rFire)
)
a <- body$fields$c$mapValue$fields
print(a)
api.2.array <- function(a, ignore.na=T) {
types <- sapply(a$arrayValue$values, get.api.data.type)
if (ignore.na & length(a$arrayValue$values)==0) {return(NULL)}
return(api.2.basic())
}
api.2.basic <- function(a, type, ignore.na=T) {
if (all(is.na(a[[type]])) & ignore.na) {return()}
switch(
type,
'nullValue'={return(NULL)}
'timestampValue'={return(as.POSIXct(a$timestampValue, format = "%Y-%m-%dT%H:%M:%S"))},
{return(a[[x]])}
)
}
api.2.basic <- function(a, type, ignore.na=T) {
if (all(is.na(a[[type]])) & ignore.na) {return()}
switch(
type,
'nullValue'={return(NULL)}
'timestampValue'={return(as.POSIXct(a$timestampValue, format = "%Y-%m-%dT%H:%M:%S"))},
{return(a[[type]])}
)
}
api.2.basic <- function(a, type, ignore.na=T) {
if (all(is.na(a[[type]])) & ignore.na) {return()}
switch(
type,
'nullValue'={return(NULL)},
'timestampValue'={return(as.POSIXct(a$timestampValue, format = "%Y-%m-%dT%H:%M:%S"))},
{return(a[[type]])}
)
}
api.2.array(a$pi)
api.types <- c('stringValue',
'integerValue',
'doubleValue',
'nullValue',
'arrayValue',
'mapValue',
'booleanValue',
'timestampValue',
'referenceValue',
'geoPointValue')
get.api.data.type <- function(a, ignore.na=T) {
stopifnot(length(a)!=1, !names(a) %in% api.types)
return(match.arg(type, api.types))
}
api.2.array(a$pi)
get.api.data.type <- function(a, ignore.na=T) {
stopifnot(all(!names(a) %in% api.types))
return(match.arg(names(a), api.types, several.ok=T))
}
api.2.array(a$pi)
api.2.array <- function(a, ignore.na=T) {
types <- sapply(a$arrayValue$values, get.api.data.type)
print(types)
if (ignore.na & length(a$arrayValue$values)==0) {return(NULL)}
return(api.2.basic(a$arrayValue$values, ))
}
api.2.array(a$pi)
api.types <- c('stringValue',
'integerValue',
'doubleValue',
'nullValue',
'arrayValue',
'mapValue',
'booleanValue',
'timestampValue',
'referenceValue',
'geoPointValue')
get.api.data.type <- function(a, ignore.na=T) {
print(names(a))
stopifnot(all(!names(a) %in% api.types))
return(match.arg(names(a), api.types))
}
api.2.basic <- function(a, type, ignore.na=T) {
if (all(is.na(a[[type]])) & ignore.na) {return()}
switch(
type,
'nullValue'={return(NULL)},
'timestampValue'={return(as.POSIXct(a$timestampValue, format = "%Y-%m-%dT%H:%M:%S"))},
{return(a[[type]])}
)
}
api.2.array <- function(a, ignore.na=T) {
types <- sapply(a$arrayValue$values, get.api.data.type)
# print(types)
if (ignore.na & length(a$arrayValue$values)==0) {return(NULL)}
return(api.2.basic(a$arrayValue$values, ))
}
api.2.array(a$pi)
get.api.data.type <- function(a, ignore.na=T) {
print(a)
stopifnot(all(!names(a) %in% api.types))
return(match.arg(names(a), api.types))
}
api.2.array(a$pi)
api.2.array <- function(a, ignore.na=T) {
types <- get.api.data.type(a$arrayValue$values)
# print(types)
if (ignore.na & length(a$arrayValue$values)==0) {return(NULL)}
return(api.2.basic(a$arrayValue$values, ))
}
api.2.array(a$pi)
get.api.data.type <- function(a, ignore.na=T) {
print(a)
stopifnot(all(names(a) %in% api.types))
return(match.arg(names(a), api.types))
}
api.2.array <- function(a, ignore.na=T) {
types <- get.api.data.type(a$arrayValue$values)
# print(types)
if (ignore.na & length(a$arrayValue$values)==0) {return(NULL)}
return(api.2.basic(a$arrayValue$values, ))
}
api.2.array(a$pi)
?mapply
api.2.basic <- function(a, type, ignore.na=T) {
if (all(is.na(a)) & ignore.na) {return()}
switch(
type,
'nullValue'={return(NULL)},
'timestampValue'={return(as.POSIXct(a, format = "%Y-%m-%dT%H:%M:%S"))},
{return(a)}
)
}
api.2.array <- function(a, ignore.na=T) {
types <- get.api.data.type(a$arrayValue$values)
# print(types)
if (ignore.na & length(a$arrayValue$values)==0) {return(NULL)}
return(mapply(api.2.basic, list(a=a$arrayValue$values, type=names(a$arrayValue$values))))
}
api.2.array(a$pi)
api.2.array <- function(a, ignore.na=T) {
# types <- get.api.data.type(a$arrayValue$values)
# print(types)
if (ignore.na & length(a$arrayValue$values)==0) {return(NULL)}
return(mapply(api.2.basic, list(a=a$arrayValue$values, type=names(a$arrayValue$values))))
}
api.2.array(a$pi)
api.2.array <- function(a, ignore.na=T) {
# types <- get.api.data.type(a$arrayValue$values)
# print(types)
if (ignore.na & length(a$arrayValue$values)==0) {return(NULL)}
return(mapply(api.2.basic, a=a$arrayValue$values, type=names(a$arrayValue$values)))
}
api.2.array(a$pi)
api.2.array <- function(a, ignore.na=T) {
# types <- get.api.data.type(a$arrayValue$values)
# print(types)
if (ignore.na & length(a$arrayValue$values)==0) {return(NULL)}
return(mapply(api.2.basic, a=a$arrayValue$values, type=names(a$arrayValue$values), ignore.na=F, USE.NAMES=F))
}
api.2.array(a$pi)
gFire.types <- c('stringValue',
'integerValue',
'doubleValue',
'nullValue',
'arrayValue',
'mapValue',
'booleanValue',
'timestampValue',
'referenceValue',
'geoPointValue')
gFire.basic.2.r <- function(a, type, ignore.na=T) {
stopifnot(type %in% gFire.types)
if (all(is.na(a[[type]])) & ignore.na) {return()}
switch(
type,
'nullValue'={return(NULL)},
'timestampValue'={return(as.POSIXct(a, format = "%Y-%m-%dT%H:%M:%S"))},
{return(a)}
)
}
gFire.array.2.r <- function(a, ignore.na=T) {
stopifnot(all(names(a$arrayValue$values) %in% gFire.types))
if (ignore.na & length(a$arrayValue$values)==0) {return(NULL)}
return(mapply(gFire.2.basic, a=a$arrayValue$values, type=names(a$arrayValue$values), ignore.na=F, USE.NAMES=F))
}
gFire.map.2.list <- function(a, ignore.na=T) {
}
gFire.array.2.r(a$pi)
c(NULL, NULL)
length(c(NULL, NULL))
a <- list('a'=letters, 'b'=seq_len(26))
b <- as.data.frame(a)
b <- as.data.frame(a, stringsAsFactors = F)
?stopifnot
is.list(data.frame())
a <- NULL
a$b
library(devtools)
library(devtools)
load_all()
a <- listDocuments(cG='Directories', partial.path=T)
class(a)
b <- unlist(a)
View(b)
?sapply
library(devtools)
load_all()
library(gFirestoreR)
library(googleAuthR)
#Test documents
data1 <- list('test'=123, 'a'='abc', 'b'=c(0.2,0.3))
data2 <- list('test'=c(1,2,3))
a <- listDocuments(cG='Directories', partial.path=T)
b <- getDocument(doc=a[[2]])
c <- createDocument(documentId = 'test2', data=data1, cG='Directories', partial.path=T)
d <- patchDocument(c, newData=data2)
#Test multi write
d2 <- gFire.doc(fields=data2)
d$fields <- data1
writes <- c(gFire.writeObj(d2, method='update'), gFire.writeObj(d, method='delete'))
writes <- c(gFire.writeObj(d2, method='update'), gFire.writeObj(d, method='update'))
writes <- list(gFire.writeObj(d2, method='update'), gFire.writeObj(d, method='update'))
e <- batchWriteDocuments(writes)
load_all()
e <- batchWriteDocuments(writes)
load_all()
e <- batchWriteDocuments(writes)
load_all()
d <- patchDocument(c, newData=data2)
d$fields <- gFire.fields(data1)
writes <- list(gFire.writeObj(d2, method='update'), gFire.writeObj(d, method='update'))
e <- batchWriteDocuments(writes)
load_all()
e <- batchWriteDocuments(writes)
print(bOut)
load_all()
e <- batchWriteDocuments(writes)
load_all()
e <- batchWriteDocuments(writes)
load_all()
e <- batchWriteDocuments(writes)
load_all()
e <- batchWriteDocuments(writes)
load_all()
writes <- list(gFire.writeObj(d2, method='update'), gFire.writeObj(d, method='update'))
e <- batchWriteDocuments(writes)
load_all()
e <- batchWriteDocuments(writes)
d2 <- gFire.doc(names=paste0(d$name,'2'), fields=data2)
d$fields <- gFire.fields(data1)
writes <- list(gFire.writeObj(d2, method='update'), gFire.writeObj(d, method='update'))
e <- batchWriteDocuments(writes)
d2 <- gFire.doc(name=paste0(d$name,'2'), fields=data2)
d$fields <- gFire.fields(data1)
writes <- list(gFire.writeObj(d2, method='update'), gFire.writeObj(d, method='update'))
e <- batchWriteDocuments(writes)
writes <- list(gFire.writeObj(d2, method='delete'))
e <- batchWriteDocuments(writes)
load_all()
writes <- list(gFire.writeObj(d2, method='delete'))
e <- batchWriteDocuments(writes)
f <- deleteDocument(d)
install()
library(gFirestoreR)
library(googleAuthR)
#Test documents
data1 <- list('test'=123, 'a'='abc', 'b'=c(0.2,0.3))
data2 <- list('test'=c(1,2,3))
a <- listDocuments(cG='Directories', partial.path=T)
library(devtools)
build()
install()
a <- listDocuments(cG='Directories', partial.path=T)
load_all()
a <- listDocuments(cG='Directories', partial.path=T)
install()
